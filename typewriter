#!/usr/bin/env bash
# Typewriter - simulate typewriter-style text output with customizable speed and formatting
# Copyright (C) 2023-2025 Gary Dean <garydean@yatti.id>
# License: GPL-3.0-or-later
set -euo pipefail

# Recommended shopt settings
shopt -s inherit_errexit shift_verbose extglob nullglob

# Script metadata
VERSION='1.1.0'
SCRIPT_PATH=$(readlink -en -- "$0")  # Full path to script
SCRIPT_NAME=${SCRIPT_PATH##*/}       # Script basename
readonly -- VERSION SCRIPT_PATH SCRIPT_NAME

# Global variable declarations
declare -i TW_INDENT=${TW_INDENT:-0}
declare -- TW_SPEED=${TW_SPEED:-normal}

# Declare associative arrays for min and max delays
declare -iA TW_MIN_DELAYS=(
  [xxxfast]=0
  [xxfast]=1
  [xfast]=3
  [vfast]=7
  [fast]=15
  [normal]=25
  [slow]=40
  [vslow]=55
  [xslow]=70
  [xxslow]=85
  [xxxslow]=99
)

declare -iA TW_MAX_DELAYS=(
  [xxxfast]=0
  [xxfast]=3
  [xfast]=7
  [vfast]=15
  [fast]=25
  [normal]=40
  [slow]=55
  [vslow]=70
  [xslow]=85
  [xxslow]=95
  [xxxslow]=99
)

# Color definitions for terminal output
if [[ -t 1 ]]; then
  declare -- RED=$'\033[0;31m'
  declare -- NC=$'\033[0m'
else
  declare -- RED=''
  declare -- NC=''
fi
readonly -- RED NC

# --------------------------------------------------------------------------------
# Utility functions
# --------------------------------------------------------------------------------

# Error message function
error() {
  local -- msg
  for msg in "$@"; do
    >&2 printf '%s: %serror%s: %s\n' "$SCRIPT_NAME" "$RED" "$NC" "$msg"
  done
}
die() { (($# > 1)) && error "${@:2}"; exit "${1:-0}"; }

# Validate argument presence
noarg() {
  if (($# < 2)) || [[ ${2:0:1} == '-' ]]; then
    die 2 "Missing argument for option '$1'"
  fi
  true
}

# Debug print variable declaration
decp() { declare -p "$@" | sed 's/^declare -[a-zA-Z-]* //'; }

# Cleanup function for exit trap
_cleanup() {
  # Only reset color if output is to a terminal
  if [[ -t 1 ]]; then
    printf '\033[0m'  # Reset color on exit
  fi
  return 0
}

# --------------------------------------------------------------------------------
# Business logic functions
# --------------------------------------------------------------------------------

# Display usage information
usage() {
  local -i exitcode=${1:-0}
  cat <<EOT
$SCRIPT_NAME $VERSION - Typewriter-style output with variable speed and indent

Usage:
  $SCRIPT_NAME [OPTIONS] text||<stdin

  text    text to 'type' (optional if reading from stdin)

Options:
  -s, --speed SPEED     Speed options:
                          xxxfast xxfast xfast vfast fast
                          normal (default)
                          slow vslow xslow xxslow xxxslow
                        Current: $(decp TW_SPEED)
  -i, --indent INDENT   Indent INDENT spaces (must be numeric)
                        Current: $(decp TW_INDENT)
  -c, --color COLOR     ANSI color code (e.g., "31" for red,
                        "32" for green, "33" for yellow,
                        "1;32" for bold green)
  -n, --no-newline      Don't add newline after output
  -V, --version         Print version and exit
                        $(decp VERSION)
  -h, --help            Display this help

Environment:
  TW_SPEED    Default speed if not specified (default: normal)
  TW_INDENT   Default indent spaces if not specified (default: 0)

Examples:
  # Basic usage with different speeds
  $SCRIPT_NAME -s fast "This types quickly"
  $SCRIPT_NAME -s slow "This types slowly"

  # Using stdin input
  echo "This is from stdin" | $SCRIPT_NAME -s normal
  cat file.txt | $SCRIPT_NAME -s xxfast

  # Indentation and formatting
  $SCRIPT_NAME -i 4 "This has 4-space indent"
  $SCRIPT_NAME -c 32 "This is green text"
  $SCRIPT_NAME -c "1;31" "This is bold red text"

  # Combined options
  $SCRIPT_NAME -s fast -i 2 -c 36 "Fast cyan text with indent"
  $SCRIPT_NAME -s slow -c 33 -n "Yellow text without newline"

  # Using environment variables
  export TW_SPEED=fast TW_INDENT=2
  $SCRIPT_NAME "Uses fast speed and 2-space indent"

  # Multi-line text with literal newlines
  $SCRIPT_NAME "First line\\nSecond line\\nThird line"

EOT
  exit "$exitcode"
}

# Main typewriter function
typewriter() {
  local -a lines=()
  local -- speed=${TW_SPEED:-normal}
  local -- line
  local -i min_delay max_delay
  local -i indent=${TW_INDENT:-0}
  local -- color=''  # ANSI color code if specified
  local -i no_newline=0
  local -i delay  # Declare once for efficiency
  local -- LF=$'\n'

  # Argument parsing loop
  while (($#)); do
    case "$1" in
      -s|--speed)
        noarg "$@"
        shift
        speed="${1,,}"
        ;;
      -i|--indent)
        noarg "$@"
        shift
        if [[ "$1" =~ ^[0-9]+$ ]]; then
          indent="$1"
        else
          die 22 "Invalid indent value '$1' - must be a positive integer"
        fi
        ;;
      -c|--color)
        noarg "$@"
        shift
        color="$1"
        ;;
      -n|--no-newline)
        no_newline=1
        ;;
      -h|--help)
        usage 0
        ;;
      -V|--version)
        echo "$SCRIPT_NAME $VERSION"
        exit 0
        ;;
      # Handle combined short options
      -[sicnhV]*)
        #shellcheck disable=SC2046  # Intentional word splitting for flag expansion
        set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}"
        ;;
      -*)
        die 22 "Invalid option '$1'"
        ;;
      *)
        lines+=("${1//\\n/"$LF"}")
        ;;
    esac
    shift
  done

  # Check if we should read from stdin
  if ((${#lines[@]} == 0)) && ! [[ -t 0 ]]; then
    # More efficient stdin reading - read all input at once if possible
    readarray -t lines

    # Fall back to line-by-line if readarray fails
    if ((${#lines[@]} == 0)); then
      while IFS= read -r line; do
        lines+=("$line")
      done
    fi
  fi

  # Handle empty input
  ((${#lines[@]})) || die 1 'No input provided'

  # Set delays based on speed parameter
  if [[ -n "${TW_MIN_DELAYS[$speed]:-}" ]]; then
    min_delay=${TW_MIN_DELAYS[$speed]}
    max_delay=${TW_MAX_DELAYS[$speed]}
  else
    die 22 "Invalid speed setting: '$speed'"
  fi

  # Set color if specified
  [[ -n "$color" ]] && printf "\033[%sm" "$color"

  # Simple typewriter effect with dynamic speed
  for i in "${!lines[@]}"; do
    line="${lines[i]}"

    # Add indentation if specified
    ((indent > 0)) && printf "%${indent}s" ""

    # Process each character
    for ((j=0; j<${#line}; j+=1)); do
      # Print single character
      printf '%s' "${line:j:1}"

      # Sleep with random delay in the selected range
      # Skip delay for xxxfast speed (0 delay) for maximum performance
      if [[ "$speed" != "xxxfast" ]]; then
        delay=$((min_delay + (RANDOM % (max_delay - min_delay + 1))))
        sleep "0.$(printf "%03d" $delay)"
      fi
    done

    # Don't add newline after the last line if --no-newline is specified
    if ((i < ${#lines[@]} - 1)) || ((no_newline == 0)); then
      echo
    fi
  done

  # Reset color if it was set
  [[ -n "$color" ]] && printf "\033[0m"
  return 0
}

# Wrapper function that passes all arguments to typewriter with defaults
tw() {
  typewriter --speed "${TW_SPEED:-normal}" --indent "${TW_INDENT:-0}" "$@"
}

# --------------------------------------------------------------------------------
# Main execution
# --------------------------------------------------------------------------------

main() {
  # Set up exit trap
  trap '_cleanup' EXIT

  # Execute typewriter with all arguments
  typewriter "$@"
  return 0
}

# Export functions if script is sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  declare -fx typewriter tw
else
  # Script is being executed directly
  main "$@"
fi

#fin