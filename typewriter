#!/usr/bin/env bash
# Typewriter - simulate typewriter-style text output with customizable speed and formatting
# Copyright (C) 2023-2025 Gary Dean <garydean@yatti.id>
# License: GPL-3.0-or-later
#
#shellcheck disable=SC2155

# Default environment variables
declare -x TW_SPEED=normal  # Default typing speed
declare -ix TW_INDENT=0     # Default indentation

# Declare associative arrays for min and max delays
declare -iA tw_min_delays=(
  [xxxfast]=0
  [xxfast]=1
  [xfast]=3
  [vfast]=7
  [fast]=15
  [normal]=25
  [slow]=40
  [vslow]=55
  [xslow]=70
  [xxslow]=85
  [xxxslow]=99
)

declare -iA tw_max_delays=(
  [xxxfast]=0
  [xxfast]=3
  [xfast]=7
  [vfast]=15
  [fast]=25
  [normal]=40
  [slow]=55
  [vslow]=70
  [xslow]=85
  [xxslow]=95
  [xxxslow]=99
)

typewriter() {
  # Main function that simulates typewriter-style output
  # Takes optional parameters for speed, indentation, color, and formatting
  # Returns 0 on success, non-zero on error
  
  #set -euo pipefail
  local -- _VERSION='1.0.8'  # Current version - performance optimized
  local -- _PRG=typewriter LF=$'\n'$'\n'
  # Only define colors that are used, fix conditional logic
  if [ -t 2 ]; then
    local -- RED=$'\033[0;31m' NOCOLOR=$'\033[0m'
  else
    local -- RED='' NOCOLOR=''
  fi
  error() { local msg; for msg in "$@"; do >&2 printf '%s: %serror%s: %s\n' "$_PRG" "$RED" "$NOCOLOR" "$msg"; done; }
  die() { local -i exitcode=1; if (($#)); then exitcode=$1; shift; fi; if (($#)); then error "$@"; fi; exit "$exitcode"; }
  noarg() { if (($# < 2)) || [[ ${2:0:1} == '-' ]]; then die 2 "Missing argument for option '$1'"; fi; true; }
  decp() { declare -p "$@" | sed 's/^declare -[a-zA-Z-]* //'; }
  xcleanup() { printf '\033[0m'; }  # Reset color on exit
  trap 'xcleanup' EXIT

  usage() {
    local -i exitcode=${1:-0}
    local -- helptext=$(cat <<EOT
$_PRG $_VERSION - Typewriter-style output with variable speed and indent

Usage:
  $_PRG [OPTIONS] text||<stdin

  text    text to 'type' (optional if reading from stdin)

Options:
  -s, --speed SPEED     Speed options:
                          xxxfast xxfast xfast vfast fast
                          normal
                          slow vslow xslow xxslow xxxslow
                        $(decp speed)
  -i, --indent INDENT   Indent INDENT spaces
                        $(decp indent)
  -c, --color COLOR     ANSI color code (e.g., "31" for red,
                        "32" for green, "33" for yellow)
  -n, --no-newline      Don't add newline after output
  -V, --version         Print version and exit
                        $(decp _VERSION)
  -h, --help            Display this help

Environment:
  TW_SPEED    If present, specifies SPEED default value
  TW_INDENT   If present, specifies INDENT default value

Examples:
  $_PRG -s slow "This is a test."

  echo "This is from stdin" | $_PRG -s slow

  $_PRG -s slow -i 4 "This is a test with 4-space indent."
  
  $_PRG -c 31 -s fast "This text will be red."

EOT
  )
    ((exitcode)) && >&2 echo "$helptext" || echo "$helptext"
    [[ -z "${1:-}" ]] && return
    exit "$exitcode"
  }

  local -a Lines=()
  local -- speed=${TW_SPEED:-normal} line input
  local -i min_delay=5 max_delay=15
  local -i indent=${TW_INDENT:-0}
  local -- color="" # ANSI color code if specified
  local -i no_newline=0

  while (($#)); do case "$1" in
    -s|--speed)    noarg "$@"; shift; speed="${1,,}" ;;
    -i|--indent)   noarg "$@"; shift; indent="$1" ;;
    -c|--color)    noarg "$@"; shift; color="$1" ;;
    -n|--no-newline) no_newline=1 ;;
    -h|--help)     usage 0 ;;
    -V|--version)  echo "$_PRG $_VERSION"; exit 0 ;;
    -[sicnhV]*) #shellcheck disable=SC2046 #split up single options
                  set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
    -*)           error "Invalid option '$1'"; return 22 ;;
    *)            Lines+=( "${1//\\n/"$LF"}" ) ;;
  esac; shift; done

  # Check if we should read from stdin
  if (( ${#Lines[@]} == 0 )) && ! [[ -t 0 ]]; then
    # More efficient stdin reading - read all input at once if possible
    mapfile -t Lines
    
    # Fall back to line-by-line if mapfile fails
    if (( ${#Lines[@]} == 0 )); then
      while IFS= read -r line; do
        Lines+=("$line")
      done
    fi
  fi
  # Handle empty input
  (( ${#Lines[@]} )) || { error 'No input provided'; return 1; }

  # Set delays based on speed parameter
  if [[ -n "${tw_min_delays[$speed]}" ]]; then
    min_delay=${tw_min_delays[$speed]}
    max_delay=${tw_max_delays[$speed]}
    # Set initial delay_ms based on speed
    delay_ms=$((min_delay + max_delay)) # Average of min and max
  else
    error "Invalid speed setting: '$speed'"
    return 1
  fi

  # Set color if specified - direct string for better performance
  [[ -n "$color" ]] && printf "\033[%sm" "$color"

  # Simple typewriter effect with dynamic speed
  for i in "${!Lines[@]}"; do
    local line="${Lines[i]}"
    
    # Add indentation if specified
    if ((indent > 0)); then
      printf "%${indent}s" ""
    fi
    
    # Process each character
    for ((j=0; j<${#line}; j++)); do
      # Print single character
      echo -n "${line:j:1}"
      
      # Sleep with random delay in the selected range
      # Skip delay for xxxfast speed (0 delay) for maximum performance
      if [[ "$speed" != "xxxfast" ]]; then
        local delay=$((min_delay + (RANDOM % (max_delay - min_delay + 1))))
        sleep 0.$(printf "%03d" $delay)
      fi
    done
    
    # Don't add newline after the last line if --no-newline is specified
    if (( i < ${#Lines[@]} - 1 )) || (( !no_newline )); then
      echo
    fi
  done
  
  # Reset color if it was set - more efficient
  [[ -n "$color" ]] && printf "\033[0m"
}
declare -fx typewriter


tw() {
  # Wrapper function that passes all arguments to typewriter with defaults
  typewriter --speed "${TW_SPEED:-fast}" --indent "${TW_INDENT:-0}" "$@"
}
declare -fx tw


# Only run main if the script is being executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  set -euo pipefail
  typewriter "$@"
else
  true
fi


#fin